trigger:
  branches:
    include:
      - master
      - develop
      - staging

variables:
  imageName: 'microservice'
  acrName: 'acrmicroservicesanti'
  resourceGroup: 'microservice-rg'
  clusterName: 'microservice-cluster'

stages:
  - stage: BuildAndTest
    displayName: Build & Test
    jobs:
      - job: Node
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Use Node.js'

          - script: npm ci
            displayName: 'Install dependencies'

          - script: npm test
            displayName: 'Run tests'

          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: 'ACR_CONNECTION'
              repository: $(imageName)
              command: buildAndPush
              Dockerfile: Dockerfile
              tags: |
                $(Build.SourceBranchName)-$(Build.BuildId)
                latest

  - stage: Deploy
    displayName: Deploy to environment
    dependsOn: BuildAndTest
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'staging')))
    jobs:
      - deployment: DeployToEnv
        environment:
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}: production
          ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}: develop
          ${{ if eq(variables['Build.SourceBranchName'], 'staging') }}: staging
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  inputs:
                    azureSubscription: 'AZURE_CONNECTION'
                    scriptType: bash
                    scriptLocation: inlineScript
                    inlineScript: |
                      echo "üîê Autenticando con AKS..."
                      az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName)

                      echo "üöÄ Haciendo rollout del deployment..."
                      kubectl set image deployment/microservice microservice=$(acrName).azurecr.io/$(imageName):$(Build.SourceBranchName)-$(Build.BuildId)
